// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PlayerFeature : Xunit.IClassFixture<PlayerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Player.feature"
#line hidden
        
        public PlayerFeature(PlayerFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Player", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Attack should kill enemy when strength minus resistance is greater then enemy hea" +
            "lth")]
        [Xunit.TraitAttribute("FeatureTitle", "Player")]
        [Xunit.TraitAttribute("Description", "Attack should kill enemy when strength minus resistance is greater then enemy hea" +
            "lth")]
        [Xunit.TraitAttribute("Category", "Attack")]
        public virtual void AttackShouldKillEnemyWhenStrengthMinusResistanceIsGreaterThenEnemyHealth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attack should kill enemy when strength minus resistance is greater then enemy hea" +
                    "lth", null, new string[] {
                        "Attack"});
#line 4
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "race",
                        "strength",
                        "dexterity",
                        "health"});
            table1.AddRow(new string[] {
                        "Orc",
                        "30",
                        "10",
                        "10"});
#line 5
 testRunner.Given("I´am have stats", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "race",
                        "strength",
                        "dexterity",
                        "health"});
            table2.AddRow(new string[] {
                        "Elf",
                        "10",
                        "10",
                        "10"});
#line 8
 testRunner.And("my enemy have stats", ((string)(null)), table2, "And ");
#line 11
 testRunner.When("I attack enemy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("the enemy should be dead", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Attack should not kill enemy when strength minus resistance is less then enemy he" +
            "alth")]
        [Xunit.TraitAttribute("FeatureTitle", "Player")]
        [Xunit.TraitAttribute("Description", "Attack should not kill enemy when strength minus resistance is less then enemy he" +
            "alth")]
        [Xunit.TraitAttribute("Category", "Attack")]
        public virtual void AttackShouldNotKillEnemyWhenStrengthMinusResistanceIsLessThenEnemyHealth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attack should not kill enemy when strength minus resistance is less then enemy he" +
                    "alth", null, new string[] {
                        "Attack"});
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "race",
                        "strength",
                        "dexterity",
                        "health"});
            table3.AddRow(new string[] {
                        "Orc",
                        "29",
                        "10",
                        "10"});
#line 15
 testRunner.Given("I´am have stats", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "race",
                        "strength",
                        "dexterity",
                        "health"});
            table4.AddRow(new string[] {
                        "Elf",
                        "10",
                        "10",
                        "10"});
#line 18
 testRunner.And("my enemy have stats", ((string)(null)), table4, "And ");
#line 21
 testRunner.When("I attack enemy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the enemy should be alive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Race should have resistance")]
        [Xunit.TraitAttribute("FeatureTitle", "Player")]
        [Xunit.TraitAttribute("Description", "Race should have resistance")]
        [Xunit.TraitAttribute("Category", "Resistance")]
        [Xunit.InlineDataAttribute("Elf", "20", new string[0])]
        [Xunit.InlineDataAttribute("Orc", "10", new string[0])]
        public virtual void RaceShouldHaveResistance(string race, string resistance, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Resistance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Race should have resistance", null, @__tags);
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
 testRunner.Given(string.Format("I´am a {0}", race), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I am creating player", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then(string.Format("I should have {0}", resistance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PlayerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PlayerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
